version: '3.8'

services:
  # Frontend Service
  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.frontend
    ports:
      - "3000:80"
    environment:
      - VITE_API_URL=http://localhost:5000/api
      - VITE_SOCKET_URL=http://localhost:5000
    depends_on:
      - backend
    networks:
      - codeforces-network

  # Backend Service
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - JWT_SECRET=your-super-secret-jwt-key-change-this
      - JWT_EXPIRES_IN=7d
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=codeforces_clone
      - DB_USER=postgres
      - DB_PASSWORD=password123
      - MONGODB_URI=mongodb://mongodb:27017/codeforces_submissions
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - REDIS_URL=redis://redis:6379
      - CORS_ORIGIN=http://localhost:3000
    depends_on:
      - postgres
      - mongodb
      - redis
      - rabbitmq
    volumes:
      - ../backend/logs:/app/logs
      - ../backend/uploads:/app/uploads
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - codeforces-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=codeforces_clone
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - codeforces-network

  # MongoDB Database
  mongodb:
    image: mongo:7
    environment:
      - MONGO_INITDB_DATABASE=codeforces_submissions
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - codeforces-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - codeforces-network

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - codeforces-network

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - codeforces-network

  # Judge Worker Service
  judge-worker:
    build:
      context: ..
      dockerfile: backend/judge/docker/Dockerfile.judge
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - MONGODB_URI=mongodb://mongodb:27017/codeforces_submissions
    depends_on:
      - rabbitmq
      - mongodb
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - judge_temp:/tmp/judge
    networks:
      - codeforces-network
    deploy:
      replicas: 2

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  rabbitmq_data:
  judge_temp:

networks:
  codeforces-network:
    driver: bridge
